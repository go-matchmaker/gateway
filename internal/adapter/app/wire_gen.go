// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"gateway/internal/adapter/config"
	"gateway/internal/adapter/storage/memcache"
	http2 "gateway/internal/adapter/transport/http"
	"gateway/internal/core/port/cache"
	"gateway/internal/core/port/http"
	"go.uber.org/zap"
	"sync"
)

// Injectors from wire.go:

func InitApp(ctx context.Context, rw *sync.RWMutex, cfg *config.Container, gatewayLogger *zap.Logger) (*App, func(), error) {
	memcacheTTL := memcache.NewMemcacheTTL()
	serverMaker, cleanup, err := httpServerFunc(ctx, cfg, gatewayLogger, memcacheTTL)
	if err != nil {
		return nil, nil, err
	}
	cacheMemcache := memcache.NewMemcache()
	app := New(rw, cfg, gatewayLogger, serverMaker, cacheMemcache, memcacheTTL)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func httpServerFunc(
	ctx context.Context,
	Cfg *config.Container,
	gatewayLogger *zap.Logger,
	ttl cache.MemcacheTTL,
) (http.ServerMaker, func(), error) {
	httpServer := http2.NewHTTPServer(ctx, Cfg, gatewayLogger, ttl)
	err := httpServer.Start(ctx)
	if err != nil {
		return nil, nil, err
	}
	return httpServer, func() { httpServer.Close(ctx) }, nil
}
